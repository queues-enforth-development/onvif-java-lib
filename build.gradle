plugins {
    id 'java'
    id 'maven-publish'
 }

version = '2.1.0003'
sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'onvif-java-lib'
group = 'com.qed.aes.camera'

java {
    withJavadocJar()
    withSourcesJar()
}

// task to list deprecated stuff in the compile
tasks.withType(JavaCompile) {
//    options.encoding = 'UTF-8'
    options.deprecation = true
    options.compilerArgs += ['-Xlint:deprecation']
}

//compileJava.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes 'Implementation-Title': 'ONVIF Java Library',
        	'Implementation-Version': version,
//        	'Main-Class': 'de.onvif.Main'
        	'Main-Class': 'org.me.javawsdiscovery.JavaWSDiscovery'
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll {
            it.name.endsWith('jar') && (!it.name.contains('javadoc')) && (!it.name.contains('sources'))
        }.collect { zipTree(it) }
    }
}

repositories {
   flatDir {
       dirs 'libs'
   }
   mavenCentral()
}


javadoc {
    options.tags = [ "date" ]
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

dependencies {

    implementation 'jakarta.json:jakarta.json-api:2.1.1'
    compile group: 'jakarta.json', name: 'jakarta.json-api', version: '2.1.1', classifier:'sources'
    compile group: 'jakarta.json', name: 'jakarta.json-api', version: '2.1.1', classifier:'javadoc'


    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15', classifier: 'sources'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.15', classifier: 'javadoc'
    implementation 'junit:junit:4.13.2'

    // Original project page: https://www.javatuples.org/index.html
    // Library: https://search.maven.org/artifact/com.flipkart.utils/javatuples/3.0/jar
    implementation 'com.flipkart.utils:javatuples:3.0'
    compile 'com.flipkart.utils:javatuples:3.0:sources'
    compile 'com.flipkart.utils:javatuples:3.0:javadoc'
}


/*
    In version 1.9.0.1:
        1: Major revision (new UI, lots of new features, conceptual change, etc.)

        9: Minor revision (maybe a change to a search box, 1 feature added, collection of bug fixes)

        0: Bug fix release

        1: Build number (if used)ï¿½that's why you see the .NET framework using something like 2.0.4.2709

    source: https://stackoverflow.com/questions/65718/what-do-the-numbers-in-a-version-typically-represent-i-e-v1-9-0-1
*/
task incrementVerion() {
    // todo finish this
    String[] versionParts = project.version.split('.');
    int major = 0;
    int minor = 0;
    int bugBuild = 0;

    if (versionParts.size() > 0) {
        major = versionParts.toInteger();
        minor = versionParts.toInteger();
        bugBuild = versionParts.toInteger();
    }

}

//uploadArchives {
//
//    repositories.mavenDeployer {
//
//        pom.version = project.version
//        pom.artifactId = project.archivesBaseName
//        pom.groupId = project.group
//    }
//}

