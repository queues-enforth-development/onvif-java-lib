import java.nio.charset.StandardCharsets
plugins {
    id 'java'
    id 'maven-publish'
}
version = '2.1.0005'
jar.archiveVersion = version
sourceCompatibility = 1.8
targetCompatibility = 1.8

archivesBaseName = 'onvif-java-lib'
group = 'com.qed.aes.camera'

java {
    withJavadocJar()
    withSourcesJar()
}

// task to list deprecated stuff in the compile
tasks.withType(JavaCompile) {
    options.encoding = StandardCharsets.ISO_8859_1
    options.deprecation = true
    options.compilerArgs += ['-Xlint:deprecation']
    options.compilerArgs += ['-Xlint:unchecked']
}

compileJava.options.encoding = StandardCharsets.ISO_8859_1

javadoc {
    options.encoding = StandardCharsets.ISO_8859_1
    options.tags = [ "date" ]
    source = sourceSets.main.allJava
}

jar {
    archiveVersion = project.version
    manifest {
        attributes 'Implementation-Title': 'ONVIF Java Library',
        	'Implementation-Version': archiveVersion,
        	'Main-Class': 'org.me.javawsdiscovery.JavaWSDiscovery'
    }

    String libName;
    String newName;
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll {
            it.name.endsWith('jar') && (!it.name.contains('javadoc')) && (!it.name.contains('sources'))
        }.collect {
            zipTree(it)
//TODO: add publishing & get the code below to workk            
            
/*            
            libName = it.getName();
            libName = libName.substring(0,libName.indexOf(".jar")).toUpperCase();

            FileTree tree = zipTree(it);
            String name;
            String path;
            File newFileName;
            tree.each { treeFile ->
                name = treeFile.getName().toUpperCase();
                path = treeFile.getAbsolutePath();
                path = path.substring(0, path.lastIndexOf(File.separator))
                if (name.contains("LICENSE") && !name.contains(libName)) {
                    newFileName = new File(String.format("%s%s%s_%s", path, File.separator, libName, treeFile.getName()));
                    (treeFile.renameTo(newFileName))? println("Rename successful!"):println("Rename failed!")
                }
            }
*/            
        }
        
    }
}

repositories {
   flatDir {
       dirs 'libs'
   }
   mavenCentral()
}

dependencies {

    implementation 'jakarta.json:jakarta.json-api:2.1.1'
    compileOnly group: 'jakarta.json', name: 'jakarta.json-api', version: '2.1.1', classifier:'sources'
    compileOnly group: 'jakarta.json', name: 'jakarta.json-api', version: '2.1.1', classifier:'javadoc'


    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    compileOnly group: 'commons-codec', name: 'commons-codec', version: '1.15', classifier: 'sources'
    compileOnly group: 'commons-codec', name: 'commons-codec', version: '1.15', classifier: 'javadoc'
    implementation 'junit:junit:4.13.2'

    // Original project page: https://www.javatuples.org/index.html
    // Library: https://search.maven.org/artifact/com.flipkart.utils/javatuples/3.0/jar
    implementation 'com.flipkart.utils:javatuples:3.0'
    compileOnly 'com.flipkart.utils:javatuples:3.0:sources'
    compileOnly 'com.flipkart.utils:javatuples:3.0:javadoc'
}


